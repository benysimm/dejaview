@{
    ViewData["Title"] = "Operation 1";
}
<div class="page-body">
    <div class="container-fluid">
        <div class="page-sidebar toggled sidebar">
            <nav class="sidebar-collapse d-none d-lg-block">
                <i class="ion ion-ios-arrow-forward show-on-collapsed"></i>
                <i class="ion ion-ios-arrow-back hide-on-collapsed"></i>
            </nav>
            <ul class="nav nav-pills nav-stacked" id="sidebar-stacked">
                <li class="d-lg-none">
                    <a href="#" class="sidebar-close"><i class="ion ion-ios-arrow-left"></i></a>
                </li>
                <li class="nav-item active">
                    <a class="nav-container dropdown-toggle" data-toggle="collapse" data-parent="#sidebar-stacked" href="#p2">
                        <i class="fa fa-street-view"></i> <span class="nav-text">Current Operations</span>
                    </a>
                    <ul class="nav nav-pills nav-stacked open" id="p2">
                        <li class="nav-item"><a class="nav-link" href="../Operations/Operation1">Honey Badger</a></li>
                        <li class="nav-item"><a class="nav-link" href="../Operations/Operation2">Yoda</a></li>
                    </ul>
                </li>
                <li class="nav-item active">
                    <a class="nav-link" href="index.html"><i class="fa fa-plus"></i> <span class="nav-text">Create Operation</span></a>
                </li>
                <li class="nav-item active">
                    <a class="nav-container dropdown-toggle" data-toggle="collapse" data-parent="#sidebar-stacked" href="#p3">
                        <i class="fa fa-history"></i> <span class="nav-text">Past Operations</span>
                    </a>
                    <ul class="nav nav-pills nav-stacked collapse" id="p3">
                        <li class="nav-item"><a class="nav-link" href="../Operations/Operation3">Luke Skywalker</a></li>
                        <li class="nav-item"><a class="nav-link" href="../Operations/Operation4">Princess Leia</a></li>
                    </ul>
                </li>
                <li class="nav-item active">
                    <a class="nav-link" href="index.html"><i class="fa fa-map-signs"></i> <span class="nav-text">Standard Routes</span></a>
                </li>
                <li class="nav-item active">
                    <a class="nav-link" href="index.html"><i class="ion ion-gear-b"></i> <span class="nav-text">Admin</span></a>
                </li>
            </ul>
        </div>
        <div class="page-content">
            <div class="row">
                <div class="col-md-10 col-sm-9">
                    <div class="card card-default widget">
                        <div class="card-heading">
                            <div class="card-controls">
                                <a href="#" class="widget-minify"><i class="fa fa-chevron-up"></i></a>
                                <a href="#" class="widget-close"><i class="fa fa-times"></i></a>
                            </div>
                            <h3 class="card-title">Honey Badger Route</h3>
                        </div>
                        <div class="card-body">
                            <div style="float:left; width:10%;">
                                <button type="button" class="btn btn-success" id="planA">Plan A</button>
                                <br /><br />
                                <button type="button" class="btn btn-default" id="planB">Plan B</button>
                                <br /><br />
                                <button type="button" class="btn btn-default" id="planC">Plan C</button>
                                <br /><br />
                                <button type="button" class="btn btn-danger" id="planX">Abort</button>
                                <div id="planNumber" style="color:white">planA</div>
                            </div>
                            <!--ArcGIS test-->
                            <div style="height: 480px; float:left; width:90%" id="simple-map-div"></div>
                        </div>
                    </div>
                </div><!-- /.col-md-9 -->
                <div class="col-md-2">
                    <div class="panel card-default widget widget-messages">
                        <div class="card-heading">
                            <div class="card-controls">
                                <a href="#" class="widget-minify"><i class="fa fa-chevron-up"></i></a>
                                <a href="#" class="widget-close"><i class="fa fa-times"></i></a>
                            </div>
                            <h3 class="card-title">Messages</h3>
                        </div>
                        <div class="card-body">
                            <div class="media-items">
                                <div class="media">
                                    <div class="media-body mb-3">
                                        <p class="media-heading weight-regular mb-0">
                                            Officer 1
                                            <span class="pull-right text-sm">5m ago</span>
                                        </p>
                                        <span class="text-sm text-muted">Alert - change plan</span>
                                    </div>
                                </div>
                                <div class="media">
                                    <div class="media-body mb-3">
                                        <p class="media-heading weight-regular mb-0">
                                            Officer 2
                                            <span class="pull-right text-sm">15m ago</span>
                                        </p>
                                        <span class="text-sm text-muted">Client on wrong side of road</span>
                                    </div>
                                </div>
                                <div class="media">
                                    <div class="media-body mb-3">
                                        <p class="media-heading weight-regular mb-0">
                                            Officer 1
                                            <span class="pull-right text-sm">20m ago</span>
                                        </p>
                                        <span class="text-sm text-muted">Client on the move</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div><!-- /.col-md-4 -->
            </div>

            <div class="row">
                <div class="col-md-6 col-sm-8">
                    <div class="card card-default widget">
                        <div class="card-heading">
                            <div class="card-controls">
                                <a href="#" class="widget-minify"><i class="fa fa-chevron-up"></i></a>
                                <a href="#" class="widget-close"><i class="fa fa-times"></i></a>
                            </div>
                            <h3 class="card-title">Client View</h3>
                        </div>
                        <div class="card-body">
                            <!--ArcGIS test-->
                            <div style="height: 480px" id="viewDiv"></div>
                            <div>Lat/Long: <span id="latlong"></span></div>
                        </div>
                    </div>
                </div><!-- /.col-md-6 -->
                <div class="col-md-6">
                    <div class="panel card-default widget widget-messages">
                        <div class="card-heading">
                            <div class="card-controls">
                                <a href="#" class="widget-minify"><i class="fa fa-chevron-up"></i></a>
                                <a href="#" class="widget-close"><i class="fa fa-times"></i></a>
                            </div>
                            <h3 class="card-title">Fly through</h3>
                        </div>
                        <div class="card-body">
                            <iframe src="https://www.youtube.com/embed/SJ2HTKrKibk?rel=0&amp;showinfo=0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>
                        </div>
                    </div>
                </div><!-- /.col-md-6 -->
            </div>

            <footer class="site-footer text-center">
                <p>
                    <strong>OB1</strong> made by
                    <a href="https://#">awesome cross team collaboration</a>
                </p>
            </footer>
        </div>
    </div>
</div>
@section Scripts
    {
    <script src="https://js.arcgis.com/4.8/"></script>
    <script type="text/javascript">

        function setButtonColour(plan) {
            document.getElementById("planNumber").innerHTML = plan;
            switch (plan) {
                case "planA":
                    document.getElementById("planA").className = "btn btn-success";
                    document.getElementById("planB").className = "btn btn-default";
                    document.getElementById("planC").className = "btn btn-default";
                    document.getElementById("planX").className = "btn btn-danger";
                    break;
                case "planB":
                    document.getElementById("planA").className = "btn btn-default";
                    document.getElementById("planB").className = "btn btn-success";
                    document.getElementById("planC").className = "btn btn-default";
                    document.getElementById("planX").className = "btn btn-danger";
                    break;
                case "planC":
                    document.getElementById("planA").className = "btn btn-default";
                    document.getElementById("planB").className = "btn btn-default";
                    document.getElementById("planC").className = "btn btn-success";
                    document.getElementById("planX").className = "btn btn-danger";
                    break;
                case "planX":
                    document.getElementById("planA").className = "btn btn-default";
                    document.getElementById("planB").className = "btn btn-default";
                    document.getElementById("planC").className = "btn btn-default";
                    document.getElementById("planX").className = "btn btn-danger";
                    break;
                default:
                    break;
            }
        }

        async function getPoint(id) {
            const response = await fetch("/api/points/" + id, {});
            const json = await response.json();
            //console.log(json);
            return json;
        }

        require([
            "esri/Map",
            "esri/views/MapView",
            "esri/Graphic",
            "esri/layers/GraphicsLayer",
            "esri/tasks/RouteTask",
            "esri/tasks/support/RouteParameters",
            "esri/tasks/support/FeatureSet",
            "esri/core/urlUtils"
        ], function (Map, MapView, Graphic, GraphicsLayer, RouteTask, RouteParameters, FeatureSet, urlUtils) {

            var routeLayer = new GraphicsLayer();

            document.getElementById("planA").onclick = function () { setNewPlan("planA"); }
            document.getElementById("planB").onclick = function () { setNewPlan("planB"); }
            document.getElementById("planC").onclick = function () { setNewPlan("planC"); }
            document.getElementById("planX").onclick = function () { setNewPlan("planX"); }

            function setNewPlan(plan) {
                setButtonColour(plan);
                if (plan == "planB") {
                    routeLayer.removeAll();
                    getPoint(265).then(data => {
                            addPoint(data, routeLayer, routeParams);
                        }).then(() =>
                        getPoint(266).then(data => {
                            addPoint(data, routeLayer, routeParams);
                        })).then(() =>
                            getPoint(268).then(data => {
                                addPoint(data, routeLayer, routeParams);
                            })).then(() =>
                                getPoint(269).then(data => {
                                    addPoint(data, routeLayer, routeParams);
                                })).then(() => {
                                    routeTask.solve(routeParams).then(showRoute);
                                    lastStop = routeParams.stops.features.splice(0, 1)[0];
                                }
                            );

                }
                if (plan == "planC" || plan == "planA")
                {
                    routeLayer.removeAll();
                    getPoint(261).then(data => {
                        addPoint(data, routeLayer, routeParams);
                    }).then(() =>
                        getPoint(262).then(data => {
                            addPoint(data, routeLayer, routeParams);
                        })).then(() =>
                            getPoint(263).then(data => {
                                addPoint(data, routeLayer, routeParams);
                            })).then(() =>
                                getPoint(264).then(data => {
                                    addPoint(data, routeLayer, routeParams);
                                })).then(() => {
                                    routeTask.solve(routeParams).then(showRoute);
                                    lastStop = routeParams.stops.features.splice(0, 1)[0];
                                }
                                );
                }
                if (plan == "planX") {
                    routeLayer.removeAll();
                    getPoint(273).then(data => {
                        addPoint(data, routeLayer, routeParams);
                    }).then(() =>
                        getPoint(272).then(data => {
                            addPoint(data, routeLayer, routeParams);
                        })).then(() =>
                            getPoint(271).then(data => {
                                addPoint(data, routeLayer, routeParams);
                            })).then(() =>
                                getPoint(270).then(data => {
                                    addPoint(data, routeLayer, routeParams);
                                })).then(() => {
                                    routeTask.solve(routeParams).then(showRoute);
                                    lastStop = routeParams.stops.features.splice(0, 1)[0];
                                }
                                );
                }

            };

            // Creates a new point geometry object based on the json data object
            // then creates a new marker with that points data
            // then adds it to the supplied graphics layer
            function addPoint(data, routeLayer, routeParams) {
                var point = {
                    type: "point",  // autocasts as new Point()
                    latitude: data.latitude,
                    longitude: data.longitude
                };
                var stop = new Graphic({
                    geometry: point,
                    symbol: markerSymbol
                });
                routeLayer.add(stop);
                routeParams.stops.features.push(stop);
            }
          
            function getRoute() {
                // add code here later when route api is done


            }

            // Proxy the route requests to avoid prompt for log in
            //urlUtils.addProxyRule({
            //    urlPrefix: "route.arcgis.com",
            //    proxyUrl: "/sproxy/"
            //});

            // Point the URL to a valid route service
            var routeTask = new RouteTask({
                url: "https://route.arcgis.com/arcgis/rest/services/World/Route/NAServer/Route_World?token=@Config.EsriToken"
            });

            // The stops and route result will be stored in this layer
            routeLayer = new GraphicsLayer();

            // Setup the route parameters
            var routeParams = new RouteParameters({
                stops: new FeatureSet(),
                outSpatialReference: { // autocasts as new SpatialReference()
                    wkid: 3857
                }
            });

            // Define the symbology used to display the stops
            var stopSymbol = {
                type: "simple-marker", // autocasts as new SimpleMarkerSymbol()
                style: "cross",
                size: 15,
                outline: { // autocasts as new SimpleLineSymbol()
                    width: 4
                }
            };

            // Define the symbology used to display the route
            var routeSymbol = {
                type: "simple-line", // autocasts as SimpleLineSymbol()
                color: [0, 0, 255, 0.5],
                width: 5
            };

            var map = new Map({
                basemap: "streets", //"streets-navigation-vector"
                layers: [routeLayer] // Add the route layer to the map
            });


            var view = new MapView({
                container: "simple-map-div", // Reference to the scene div created in step 5
                map: map, // Reference to the map object created before the scene
                center: [151.274034, -33.887742],
                zoom: 16
            });


            // Create a symbol for drawing the point
            var markerSymbol = {
                type: "simple-marker",  // autocasts as new SimpleMarkerSymbol()
                color: [226, 119, 40]
            };

              // Create a polygon geometry
      var polygon = {
        type: "polygon", // autocasts as new Polygon()
        rings: [
          [151.274034, -33.887742],
          [151.273808, -33.887591],
          [151.273647, -33.887769],
          [151.273776, -33.887845],
          [151.274034, -33.887742]
        ]
      };

      // Create a symbol for rendering the graphic
      var fillSymbol = {
        type: "simple-fill", // autocasts as new SimpleFillSymbol()
        color: [255, 0, 0, 0.8],
        outline: { // autocasts as new SimpleLineSymbol()
          color: [255, 255, 255],
          width: 1
        }
      };

      // Add the geometry and symbol to a new graphic
      var polygonGraphic = new Graphic({
        geometry: polygon,
        symbol: fillSymbol
            });

            var point1 = {
                type : "point",
                latitude: -33.885458,
                longitude: 151.273620
            };

            var point2 = {
                type: "point",
                latitude: -33.890817,
                longitude: 151.272739
            };

            var markerSymbol1 = {
                type: "simple-marker",
                color: [0,255,0],
                outline: {
                    color: [255, 255, 255],
                    width: 2
                }
            };

      var officer1 = new Graphic({
            geometry: point1,
            symbol: markerSymbol1
            });

            var officer2 = new Graphic({
                geometry: point2,
                symbol: markerSymbol1
            });
        

            view.graphics.add(polygonGraphic);
            view.graphics.add(officer1);
            view.graphics.add(officer2);

            // ugly promise chain to ensure all points are returned before attempign to solve the route
            // needs to be tweaked but it works
            // also currently hardcoded to grab the first 3 points in the database
            getPoint(261).then(data => {
                addPoint(data, routeLayer, routeParams);
                }).then(() =>
                getPoint(262).then(data => {
                    addPoint(data, routeLayer, routeParams);
                })).then(() =>
                    getPoint(263).then(data => {
                        addPoint(data, routeLayer, routeParams);
                    })).then(() =>
                        getPoint(264).then(data => {
                            addPoint(data, routeLayer, routeParams);
                        })).then(() => {
                            routeTask.solve(routeParams).then(showRoute);
                            lastStop = routeParams.stops.features.splice(0, 1)[0];
                        }
                    );

            function showRoute(data) {
                console.log("calling showRoute");
                var routeResult = data.routeResults[0].route;
                routeResult.symbol = routeSymbol;
                routeLayer.add(routeResult);
            }

        });

        require([
                "esri/widgets/Track",
                "esri/views/MapView",
                "esri/Map"
            ], function (
                Track, MapView, Map
            ) {
                    var map = new Map({
                        basemap: "topo"
                    });

                    var view = new MapView({
                        map: map,
                        container: "viewDiv"
                    });

                    // Create an instance of the Track widget
                    // and add it to the view's UI
                    var track = new Track({
                        view: view,
                        id: "client"
                    });
                    view.ui.add(track, "top-left");


                    // The sample will start tracking your location
                    // once the view becomes ready
                    view.when(function () {
                        track.start();
                    });
                });

        function newLocation(position) {
            var lat = position.coords.latitude;
            var long = position.coords.longitude;
            document.getElementById("latlong").innerHTML = lat + " , " + long;
        }

        function errLocation(err) {
            document.getElementById("latlong").innerHTML = err.code + ":" + err.message;
        }

        var options = { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 };

        //navigator.geolocation.getCurrentPosition(showLocation); //Get once
        navigator.geolocation.watchPosition(newLocation, errLocation, options);      //Poll
    </script>
    <script src="../js/pages/generalpage.js"></script>
}
