@{
    ViewData["Title"] = "Home Page";
}


<div class="row">
    <div class="col-md-10">
        <h1>ArcGIS testing</h1>
        <div style="height: 400px" id="simple-map-div"></div>
    </div>
</div>

<div class="row">
    <div class="col-md-3">
        <h2>Application uses</h2>
        <ul>
            <li>Sample pages using ASP.NET Core MVC</li>
            <li>Theming using <a href="https://go.microsoft.com/fwlink/?LinkID=398939">Bootstrap</a></li>
        </ul>
    </div>
    <div class="col-md-3">
        <h2>How to</h2>
        <ul>
            <li><a href="https://go.microsoft.com/fwlink/?LinkID=398600">Add a Controller and View</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=699315">Manage User Secrets using Secret Manager.</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=699316">Use logging to log a message.</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=699317">Add packages using NuGet.</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=699319">Target development, staging or production environment.</a></li>
        </ul>
    </div>
    <div class="col-md-3">
        <h2>Overview</h2>
        <ul>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=518008">Conceptual overview of what is ASP.NET Core</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=699320">Fundamentals of ASP.NET Core such as Startup and middleware.</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=398602">Working with Data</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=398603">Security</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkID=699321">Client side development</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkID=699322">Develop on different platforms</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkID=699323">Read more on the documentation site</a></li>
        </ul>
    </div>
    <div class="col-md-3">
        <h2>Run &amp; Deploy</h2>
        <ul>
            <li><a href="https://go.microsoft.com/fwlink/?LinkID=517851">Run your app</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkID=517853">Run tools such as EF migrations and more</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkID=398609">Publish to Microsoft Azure Web Apps</a></li>
        </ul>
    </div>
</div>


@section Scripts
{
    
    <script src="https://js.arcgis.com/4.8/"></script>

    <script type="text/javascript">

        

        require([
            "esri/Map",
            "esri/views/MapView",
            "esri/Graphic",
            "esri/layers/GraphicsLayer",
            "esri/tasks/RouteTask",
            "esri/tasks/support/RouteParameters",
            "esri/tasks/support/FeatureSet",
            "esri/core/urlUtils"
        ], function (Map, MapView, Graphic, GraphicsLayer, RouteTask, RouteParameters, FeatureSet, urlUtils) {

            // Proxy the route requests to avoid prompt for log in
            //urlUtils.addProxyRule({
            //    urlPrefix: "route.arcgis.com",
            //    proxyUrl: "/sproxy/"
            //});

            // Point the URL to a valid route service
            var routeTask = new RouteTask({
                url: "https://route.arcgis.com/arcgis/rest/services/World/Route/NAServer/Route_World"
            });

            // The stops and route result will be stored in this layer
            var routeLayer = new GraphicsLayer();

            // Setup the route parameters
            var routeParams = new RouteParameters({
                stops: new FeatureSet(),
                outSpatialReference: { // autocasts as new SpatialReference()
                    wkid: 3857
                }
            });

            // Define the symbology used to display the stops
            var stopSymbol = {
                type: "simple-marker", // autocasts as new SimpleMarkerSymbol()
                style: "cross",
                size: 15,
                outline: { // autocasts as new SimpleLineSymbol()
                    width: 4
                }
            };

            // Define the symbology used to display the route
            var routeSymbol = {
                type: "simple-line", // autocasts as SimpleLineSymbol()
                color: [0, 0, 255, 0.5],
                width: 5
            };

            var map = new Map({
                basemap: "streets", //"streets-navigation-vector"
                layers: [routeLayer] // Add the route layer to the map
            });

            var view = new MapView({
                container: "simple-map-div", // Reference to the scene div created in step 5
                map: map, // Reference to the map object created before the scene
                center: [149.137802, -35.313423],
                zoom: 16
            });

            // First create a point geometry
            var point1 = {
                type: "point",  // autocasts as new Point()
                latitude: -35.312609,
                longitude: 149.136368
            };

            var point2 = {
                type: "point",  // autocasts as new Point()
                latitude: -35.313423,
                longitude: 149.137802
            };

            var point3 = {
                type: "point",  // autocasts as new Point()
                latitude: -35.316067,
                longitude: 149.135420
            };
            
            

            // Create a symbol for drawing the point
            var markerSymbol = {
                type: "simple-marker",  // autocasts as new SimpleMarkerSymbol()
                color: [226, 119, 40]
            };

            // Create a graphic and add the geometry and symbol to it
            var stop1 = new Graphic({
                geometry: point1,
                symbol: markerSymbol
            });

            var stop2 = new Graphic({
                geometry: point2,
                symbol: markerSymbol
            });

            var stop3 = new Graphic({
                geometry: point3,
                symbol: markerSymbol
            });


            //var stop = new Graphic(event.mapPoint, stopSymbol);
            routeLayer.add(stop1);
            routeParams.stops.features.push(stop1);

            routeLayer.add(stop2);
            routeParams.stops.features.push(stop2);

            routeLayer.add(stop3);
            routeParams.stops.features.push(stop3);

            if (routeParams.stops.features.length >= 2) {
                routeTask.solve(routeParams).then(showRoute);
                lastStop = routeParams.stops.features.splice(0, 1)[0];
            }

            function showRoute(data) {

                console.log("calling showRoute");

                var routeResult = data.routeResults[0].route;
                routeResult.symbol = routeSymbol;
                routeLayer.add(routeResult);
            }
        });

        console.log('testing');
    </script>
}
