
@{
    ViewData["Title"] = "Client";
}

<div class="page-body">
    <div class="container-fluid">
        <div class="page-sidebar toggled sidebar">
            <nav class="sidebar-collapse d-none d-lg-block">
                <i class="ion ion-ios-arrow-forward show-on-collapsed"></i>
                <i class="ion ion-ios-arrow-back hide-on-collapsed"></i>
            </nav>

            <ul class="nav nav-pills nav-stacked" id="sidebar-stacked">
                <li class="d-lg-none">
                    <a href="#" class="sidebar-close"><i class="ion ion-ios-arrow-left"></i></a>
                </li>
                <li class="nav-item active">
                    <a class="nav-link" href="index.html"><i class="ion ion-ios-home"></i> <span class="nav-text">Paparazzi Protector</span></a>
                </li>
                <li class="nav-item">
                    <a class="nav-container" data-toggle="collapse" data-parent="#sidebar-stacked" href="#p1">
                        <i class="ion ion-ios-flask"></i> <span class="nav-text">User Interface <span class="badge badge-pill badge-nav badge-warning">6</span></span>
                    </a>
                    <ul class="nav nav-pills nav-stacked collapse" id="p1">
                        <li class="nav-item"><a class="nav-link" href="ui-buttons.html">Buttons</a></li>
                        <li class="nav-item"><a class="nav-link" href="ui-grid.html">Grid</a></li>
                        <li class="nav-item"><a class="nav-link" href="ui-typography.html">Typography</a></li>
                        <li class="nav-item"><a class="nav-link" href="ui-icons.html">Icons</a></li>
                        <li class="nav-item"><a class="nav-link" href="ui-images.html">Images</a></li>
                        <li class="nav-item"><a class="nav-link" href="ui-components.html">Components</a></li>
                    </ul>
                </li>
                <li class="nav-item">
                    <a class="nav-container dropdown-toggle" data-toggle="collapse" data-parent="#sidebar-stacked" href="#p2">
                        <i class="ion ion-ios-pie"></i> <span class="nav-text">Charts</span>
                    </a>
                    <ul class="nav nav-pills nav-stacked collapse" id="p2">
                        <li class="nav-item"><a class="nav-link" href="chart-flot.html">Flot Chart</a></li>
                        <li class="nav-item"><a class="nav-link" href="chart-morris.html">Morris Chart</a></li>
                    </ul>
                </li>
                <li class="nav-item">
                    <a class="nav-container" data-toggle="collapse" data-parent="#sidebar-stacked" href="#p3">
                        <i class="ion ion-ios-copy"></i> <span class="nav-text">Custom Pages <span class="badge badge-pill badge-nav badge-warning">4</span></span>
                    </a>
                    <ul class="nav nav-pills nav-stacked collapse" id="p3">
                        <li class="nav-item"><a class="nav-link" href="page-login.html">Login</a></li>
                        <li class="nav-item"><a class="nav-link" href="page-register.html">Register</a></li>
                        <li class="nav-item"><a class="nav-link" href="page-reset-password.html">Reset Password</a></li>
                        <li class="nav-item"><a class="nav-link" href="page-lock-screen.html">Lock Screen</a></li>
                        <li class="nav-item"><a class="nav-link" href="page-blank.html">Blank Page</a></li>
                        <li class="nav-item"><a class="nav-link" href="page-error-404.html">404 Page</a></li>
                        <li class="nav-item"><a class="nav-link" href="page-error-500.html">500 Page</a></li>
                    </ul>
                </li>
                <li class="nav-item">
                    <a class="nav-container dropdown-toggle" data-toggle="collapse" data-parent="#sidebar-stacked" href="#p4">
                        <i class="ion ion-ios-paper"></i> <span class="nav-text">Forms</span>
                    </a>
                    <ul class="nav nav-pills nav-stacked collapse" id="p4">
                        <li class="nav-item"><a class="nav-link" href="form-elements.html">Form Elements</a></li>
                        <li class="nav-item"><a class="nav-link" href="form-validation.html">Form Validation</a></li>

                        <li class="nav-item"><a class="nav-link" href="form-summernote.html">Summernote</a></li>
                    </ul>
                </li>
                <li class="nav-item">
                    <a class="nav-container dropdown-toggle" data-toggle="collapse" data-parent="#sidebar-stacked" href="#p5">
                        <i class="ion ion-ios-list"></i> <span class="nav-text">Tables</span>
                    </a>
                    <ul class="nav nav-pills nav-stacked collapse" id="p5">
                        <li class="nav-item"><a class="nav-link" href="table-basic.html">Basic Table</a></li>
                        <li class="nav-item"><a class="nav-link" href="table-data.html">Data Table</a></li>
                    </ul>
                </li>
                <li class="nav-item">
                    <a class="nav-container" href="calendar.html">
                        <i class="ion ion-ios-calendar"></i> <span class="nav-text">Calendar</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-container dropdown-toggle" data-toggle="collapse" data-parent="#sidebar-stacked" href="#p7">
                        <i class="ion ion-ios-location"></i> <span class="nav-text">Maps</span>
                    </a>
                    <ul class="nav nav-pills nav-stacked collapse" id="p7">
                        <li class="nav-item"><a class="nav-link" href="map-google.html">Google Maps</a></li>
                        <li class="nav-item"><a class="nav-link" href="map-vector.html">Vector Maps</a></li>
                    </ul>
                </li>
            </ul>
        </div>
        <div class="page-content">
            <div class="row">
                <div class="col-md-9 col-sm-8">
                    <div class="card card-default widget">
                        <div class="card-heading">
                            <div class="card-controls">
                                <a href="#" class="widget-minify"><i class="fa fa-chevron-up"></i></a>
                                <a href="#" class="widget-close"><i class="fa fa-times"></i></a>
                            </div>
                            <h3 class="card-title">Client View</h3>
                        </div>
                        <div class="card-body">
                            <!--ArcGIS test-->
                            <div style="height: 400px" id="viewDiv"></div>
                        </div>
                        <div>Lat/Long: <span id="latlong"></span></div>
                    </div>
                </div><!-- /.col-md-9 -->
            </div>
            <footer class="site-footer text-center">
                <p>&copy; 2018 Spark</p>
                <ul class="list-inline">
                    <li class="list-inline-item"><a href="#">Home</a></li>
                    <li class="list-inline-item"><a href="#">Support</a></li>
                    <li class="list-inline-item"><a href="#">FAQ</a></li>
                    <li class="list-inline-item"><a href="#">Contact</a></li>
                </ul>
            </footer>
        </div>
    </div>
</div>


@section Scripts
{
    <script src="https://js.arcgis.com/4.9/"></script>

    <script>
        require([
                "esri/widgets/Track",
                "esri/views/MapView",
                "esri/Map",
                "esri/Graphic",
                "esri/layers/GraphicsLayer",
                "esri/tasks/RouteTask",
                "esri/tasks/support/RouteParameters",
                "esri/tasks/support/FeatureSet",
                "esri/symbols/PictureMarkerSymbol",
                "esri/core/urlUtils"
            ],
            function(
                Track,
                MapView,
                Map,
                Graphic,
                GraphicsLayer,
                RouteTask,
                RouteParameters,
                FeatureSet,
                PictureMarkerSymbol,
                urlUtils
            ) {

                var routeSymbol = {
                    type: "simple-line", // autocasts as SimpleLineSymbol()
                    color: [0, 0, 255, 0.5],
                    width: 5
                };

                var markerSymbol = {
                    type: "simple-marker", // autocasts as new SimpleMarkerSymbol()
                    color: [226, 119, 40]
                };

                var bobafettSymbol = {
                    type: "picture-marker", // autocasts as new PictureMarkerSymbol()
                    url: "/img/bobafett-32x32.png",
                    width: "32px",
                    height: "32px"
                };

                var routeTask = new RouteTask({
                    url:
                        "https://route.arcgis.com/arcgis/rest/services/World/Route/NAServer/Route_World?token=UHRT9utKqjr3B7kf-gFK9Eqe4n0fpXuhw05PsUWE2r5U0VoDyy6wzFlPkVA8Pswm1DG8V0G_gnWaYmhegCIT6eJMX7s25ypGICtHLOJnFOLHq9fJbQNTVx98p66h5OXhxQwCQknq_TfnEwG-EYB4yA.."
                });

                // The current GPS location will be rendered in this layer
                var currentLocationLayer = new GraphicsLayer();

                // The stops and route result will be stored in this layer
                var routeLayer = new GraphicsLayer();

                // Setup the route parameters
                var routeParams = new RouteParameters({
                    stops: new FeatureSet(),
                    outSpatialReference: { // autocasts as new SpatialReference()
                        wkid: 3857
                    }
                });

                var map = new Map({
                    basemap: "streets-navigation-vector", /*https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html#basemap*/
                    layers: [routeLayer, currentLocationLayer] // Add the route layer to the map
                });

                var view = new MapView({
                    map: map,
                    center: [149.137802, -35.313423],
                    container: "viewDiv",
                    zoom: 16
                });

                var deviceTestPath = [];
                var routePoints = [];

                loadDeviceLocations();
                loadRouteData();


                // GPS tracking support
                //                var track = new Track({
                //                    view: view,
                //                    id: "client"
                //                });
                //                view.ui.add(track, "top-left");
                //
                //                view.when(function () {
                //                    track.start();
                //                });


                setInterval(refreshMap, 3000);

                function getCurrentGpsLocation() {
                    return deviceTestPath.shift();
                }

                function refreshMap() {
                    console.log('refreshMap locations.length = ' + deviceTestPath.length);

                    var currentDeviceLocation = getCurrentGpsLocation();

                    if (!currentDeviceLocation) return;

                    console.log('currentDeviceLocation = ' +
                        currentDeviceLocation.lat +
                        '/' +
                        currentDeviceLocation.long);
                    var point = {
                        type: "point",
                        latitude: currentDeviceLocation.lat,
                        longitude: currentDeviceLocation.long
                    };
                    var currentLocationPin = new Graphic({ geometry: point, symbol: bobafettSymbol });
                    currentLocationLayer.removeAll();
                    currentLocationLayer.add(currentLocationPin);

                    // now redraw route pins that are nearby
                    plotRoutePointsInCloseProximity(currentDeviceLocation);
                }

                function plotRoutePointsInCloseProximity(currentLocation) {
                    var stopsList = getStops(routePoints, currentLocation);
                    routeParams.stops.features = [];
                    routeLayer.removeAll();

                    for (var i = 0; i < stopsList.length; i++) {
                        routeParams.stops.features.push(stopsList[i]);
                        routeLayer.add(stopsList[i]);
                    }

                    if (routeParams.stops.features.length >= 2) {
                        routeTask.solve(routeParams).then(showRoute);
                        lastStop = routeParams.stops.features.splice(0, 1)[0];
                    }
                }

                // Call the server for a list of lat/long coordinates that defines the route
                function loadRouteData() {
                    $.getJSON("/data/client-route-data.json")
                        .done(function(routeData) {
                            routePoints = routeData;
                            plotRoutePointsInCloseProximity();
                        })
                        .fail(function(jqxhr, textStatus, error) {
                            var err = textStatus + ", " + error;
                            console.log("Request failed: " + err);
                        });
                }

                // Callback for once the route is computed, to plot the result
                function showRoute(data) {
                    console.log("calling showRoute");
                    var routeResult = data.routeResults[0].route;
                    routeResult.symbol = routeSymbol;
                    routeLayer.add(routeResult);
                }

                // Given a list of simple lat/longs, turn them into a list of ArcGIS points for plotting
                function getStops(routeData, currentLocation) {
                    var stopsList = [];
                    console.log('routeData.length = ' + routeData.length);


                    var lastVisitedIndex = -1;

                    for (var i = 0; i < routeData.length; i++) {
                        if (routeData[i].visited === true) {
                            lastVisitedIndex = i;
                        }
                    }

                    for (var i = 0; i < routeData.length; i++) {
                        console.log('adding route point id: ' +
                            routeData[i].id +
                            ' lat/long: ' +
                            routeData[i].lat +
                            "/" +
                            routeData[i].long);

                        if (currentLocation) {
                            var distance = getDistanceFromLatLonInMeters(currentLocation.lat,
                                currentLocation.long,
                                routeData[i].lat,
                                routeData[i].long);

                            console.log('calculated distance: ' + distance);

                            if (distance < 30) {
                                routeData[i].visited = true;
                            }
                        }

                        //if (500 < windowsize && windowsize < 600)


                        if (lastVisitedIndex === -1) {
                            console.log('user has NOT visited any points, render first 2');
                            // render first 2 points
                            if (0 <= i && i < 2) {
                                console.log('rendering a point!');

                                var point = {
                                    type: "point",
                                    latitude: routeData[i].lat,
                                    longitude: routeData[i].long
                                };

                                stopsList.push(new Graphic({
                                    geometry: point,
                                    symbol: markerSymbol
                                }));
                            }
                        } else {
                            console.log('users last visited point was ' + lastVisitedIndex);
                            
                            // else render last visited point plus 2
                            if (lastVisitedIndex <= i && i <= (lastVisitedIndex + 2)) {
                                console.log('rendering a point! ' + i);

                                var point = {
                                    type: "point",
                                    latitude: routeData[i].lat,
                                    longitude: routeData[i].long
                                };

                                stopsList.push(new Graphic({
                                    geometry: point,
                                    symbol: markerSymbol
                                }));
                            }
                        }
                    }

                    return stopsList;
                }

                // Get the GPS lat/long coordindates of the device (for demo mode this is faked)
                function loadDeviceLocations() {
                    $.getJSON("/data/fake-gps-coordinates.json")
                        .done(function(deviceLocations) {
                            deviceTestPath = deviceLocations;
                            for (var i = 0; i < deviceLocations.length; i++) {
                                console.log('deviceLocations lat/long: ' +
                                    deviceLocations[i].lat +
                                    '/' +
                                    deviceLocations[i].long);
                            }
                        })
                        .fail(function(jqxhr, textStatus, error) {
                            var err = textStatus + ", " + error;
                            console.log("Request failed: " + err);
                        });
                }

                function getDistanceFromLatLonInMeters(lat1, lon1, lat2, lon2) {
                    var R = 6371; // Radius of the earth in km
                    var dLat = deg2rad(lat2 - lat1); // deg2rad below
                    var dLon = deg2rad(lon2 - lon1);
                    var a =
                        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                            Math.cos(deg2rad(lat1)) *
                            Math.cos(deg2rad(lat2)) *
                            Math.sin(dLon / 2) *
                            Math.sin(dLon / 2);
                    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                    var d = R * c * 1000; // Distance in m
                    return d;
                }

                function deg2rad(deg) {
                    return deg * (Math.PI / 180)
                }
            });

        function newLocation(position) {
            var lat = position.coords.latitude;
            var long = position.coords.longitude;
            document.getElementById("latlong").innerHTML = lat + " , " + long;
        }

        function errLocation(err) {
            document.getElementById("latlong").innerHTML = err.code + ":" + err.message;
        }

        var options = { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 };

        //navigator.geolocation.getCurrentPosition(showLocation); //Get once
        navigator.geolocation.watchPosition(newLocation, errLocation, options); //Poll
    </script>
    <script src="../js/pages/generalpage.js"></script>
}
